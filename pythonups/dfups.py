# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dfups')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dfups')
    _dfups = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dfups', [dirname(__file__)])
        except ImportError:
            import _dfups
            return _dfups
        try:
            _mod = imp.load_module('_dfups', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dfups = swig_import_helper()
    del swig_import_helper
else:
    import _dfups
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def getId(fd):
    return _dfups.getId(fd)
getId = _dfups.getId

def getVersion(fd):
    return _dfups.getVersion(fd)
getVersion = _dfups.getVersion

def getEnergy(fd):
    return _dfups.getEnergy(fd)
getEnergy = _dfups.getEnergy

def getAdc1(fd):
    return _dfups.getAdc1(fd)
getAdc1 = _dfups.getAdc1

def getAdc2(fd):
    return _dfups.getAdc2(fd)
getAdc2 = _dfups.getAdc2

def getVcc(fd):
    return _dfups.getVcc(fd)
getVcc = _dfups.getVcc

def setFunction(fd, flag):
    return _dfups.setFunction(fd, flag)
setFunction = _dfups.setFunction

def getFunction(fd):
    return _dfups.getFunction(fd)
getFunction = _dfups.getFunction

def getRgbR(fd):
    return _dfups.getRgbR(fd)
getRgbR = _dfups.getRgbR

def setRgbR(fd, num):
    return _dfups.setRgbR(fd, num)
setRgbR = _dfups.setRgbR

def getRgbG(fd):
    return _dfups.getRgbG(fd)
getRgbG = _dfups.getRgbG

def setRgbG(fd, num):
    return _dfups.setRgbG(fd, num)
setRgbG = _dfups.setRgbG

def setRgbB(fd, num):
    return _dfups.setRgbB(fd, num)
setRgbB = _dfups.setRgbB

def getRgbB(fd):
    return _dfups.getRgbB(fd)
getRgbB = _dfups.getRgbB

def Init(id):
    return _dfups.Init(id)
Init = _dfups.Init

def getTimer(fd):
    return _dfups.getTimer(fd)
getTimer = _dfups.getTimer

def setTimer(fd, num):
    return _dfups.setTimer(fd, num)
setTimer = _dfups.setTimer

def shDown(fd, time):
    return _dfups.shDown(fd, time)
shDown = _dfups.shDown

def setElectricity(fd, value):
    return _dfups.setElectricity(fd, value)
setElectricity = _dfups.setElectricity

def getElectricity(fd):
    return _dfups.getElectricity(fd)
getElectricity = _dfups.getElectricity
# This file is compatible with both classic and new-style classes.


