# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dfups', [dirname(__file__)])
        except ImportError:
            import _dfups
            return _dfups
        if fp is not None:
            try:
                _mod = imp.load_module('_dfups', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dfups = swig_import_helper()
    del swig_import_helper
else:
    import _dfups
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def getId(*args):
  return _dfups.getId(*args)
getId = _dfups.getId

def getVersion(*args):
  return _dfups.getVersion(*args)
getVersion = _dfups.getVersion

def getEnergy(*args):
  return _dfups.getEnergy(*args)
getEnergy = _dfups.getEnergy

def getAdc1(*args):
  return _dfups.getAdc1(*args)
getAdc1 = _dfups.getAdc1

def getAdc2(*args):
  return _dfups.getAdc2(*args)
getAdc2 = _dfups.getAdc2

def getVcc(*args):
  return _dfups.getVcc(*args)
getVcc = _dfups.getVcc

def functionSet(*args):
  return _dfups.functionSet(*args)
functionSet = _dfups.functionSet

def functionGet(*args):
  return _dfups.functionGet(*args)
functionGet = _dfups.functionGet

def rgbRGet(*args):
  return _dfups.rgbRGet(*args)
rgbRGet = _dfups.rgbRGet

def rgbRSet(*args):
  return _dfups.rgbRSet(*args)
rgbRSet = _dfups.rgbRSet

def rgbGGet(*args):
  return _dfups.rgbGGet(*args)
rgbGGet = _dfups.rgbGGet

def rgbGSet(*args):
  return _dfups.rgbGSet(*args)
rgbGSet = _dfups.rgbGSet

def rgbBSet(*args):
  return _dfups.rgbBSet(*args)
rgbBSet = _dfups.rgbBSet

def rgbBGet(*args):
  return _dfups.rgbBGet(*args)
rgbBGet = _dfups.rgbBGet

def Init(*args):
  return _dfups.Init(*args)
Init = _dfups.Init

def timerGet(*args):
  return _dfups.timerGet(*args)
timerGet = _dfups.timerGet

def timerSet(*args):
  return _dfups.timerSet(*args)
timerSet = _dfups.timerSet

def shdown(*args):
  return _dfups.shdown(*args)
shdown = _dfups.shdown
# This file is compatible with both classic and new-style classes.


